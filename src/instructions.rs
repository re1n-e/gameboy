enum AddrMode {
    AmImp,
    AmRD16,
    AmRr,
    AmMrr,
    AmR,
    AmRD8,
    AmRMr,
    AmRhli,
    AmRhld,
    AmHlir,
    AmHldr,
    AmRa8,
    AmA8r,
    AmHlspr,
    AmD16,
    AmD8,
    AmD16r,
    AmMrd8,
    AmMr,
    AmA16r,
    AmRa16,
}

enum RegType {
    RtNone,
    RtA,
    RtF,
    RtB,
    RtC,
    RtD,
    RtE,
    RtH,
    RtL,
    RtAf,
    RtBc,
    RtDe,
    RtHl,
    RtSp,
    RtPc,
}

enum InType {
    InNone,
    InNop,
    InLd,
    InInc,
    InDec,
    InRlca,
    InAdd,
    InRrca,
    InStop,
    InRla,
    InJr,
    InRra,
    InDaa,
    InCpl,
    InScf,
    InCcf,
    InHalt,
    InAdc,
    InSub,
    InSbc,
    InAnd,
    InXor,
    InOr,
    InCp,
    InPop,
    InJp,
    InPush,
    InRet,
    InCb,
    InCall,
    InReti,
    InLdh,
    InJphl,
    InDi,
    InEi,
    InRst,
    InErr,
    //CB instructions...
    InRlc,
    InRrc,
    InRl,
    InRr,
    InSla,
    InSra,
    InSwap,
    InSrl,
    InBit,
    InRes,
    InSet,
}

enum CondType {
    CtNone,
    CtNz,
    CtZ,
    CtNc,
    CtC,
}

struct Instruction {
    type_in: InType,
    mode: AddrMode,
    reg_1: RegType,
    reg_2: RegType,
    cond: CondType,
    param: u8,
}
